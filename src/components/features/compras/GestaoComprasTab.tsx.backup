
"use client";

import * as React from "react";
import { useState, useEffect, useMemo, useCallback } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { format, addDays, subDays, startOfDay, endOfDay, isSameDay } from "date-fns";
import { ptBR } from "date-fns/locale";
import { db } from '@/lib/config/firebase';
import { collection, query, where, onSnapshot, Timestamp, doc, updateDoc, orderBy, getDocs, writeBatch } from 'firebase/firestore';
import type { ShoppingListItem, Quotation } from '@/types';

import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Alert, AlertTitle } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from '@/contexts/AuthContext';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogClose } from "@/components/ui/dialog";

import {
    ChevronLeft,
    ChevronRight,
    Calendar as IconCalendar,
    Search,
    Download,
    Eye,
    Loader2,
    Info,
    PauseCircle,
    PlayCircle,
    FileBarChart,
} from 'lucide-react';

const QUOTATIONS_COLLECTION = 'quotations';
const SHOPPING_LIST_ITEMS_COLLECTION = 'shopping_list_items';

interface GestaoComprasTabProps {
  selectedDate: Date;
  onDateChange: (date: Date) => void;
}

export default function GestaoComprasTab({ selectedDate, onDateChange }: GestaoComprasTabProps) {
  const router = useRouter();
  const searchParams = useSearchParams();
  const { toast } = useToast();
  const { user } = useAuth();
  
  const [shoppingListItems, setShoppingListItems] = useState<ShoppingListItem[]>([]);
  const [quotations, setQuotations] = useState<Quotation[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [loadingStates, setLoadingStates] = useState({
    quotations: true,
    items: true
  });
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState<string>("todos-status");
  const [selectedQuotationId, setSelectedQuotationId] = useState<string | null>(null);

  const [isResumeModalOpen, setIsResumeModalOpen] = useState(false);
  const [quotationToResume, setQuotationToResume] = useState<Quotation | null>(null);
  const [newDeadlineDate, setNewDeadlineDate] = useState<Date | undefined>();
  const [newDeadlineTime, setNewDeadlineTime] = useState("17:00");

  // Log inicial
  React.useEffect(() => {
      selectedDate: selectedDate.toISOString(),
      hasUser: !!user
    });
  }, []);

  // Monitor loading state changes
  React.useEffect(() => {
    const allLoaded = !loadingStates.quotations && !loadingStates.items;
      quotationsLoading: loadingStates.quotations,
      itemsLoading: loadingStates.items,
      overallLoading: isLoading,
      shouldSetLoaded: allLoaded && isLoading
    });
    
    if (allLoaded && isLoading) {
        quotationsCount: quotations.length,
        itemsCount: shoppingListItems.length 
      });
      setIsLoading(false);
    }
  }, [loadingStates, isLoading, quotations.length, shoppingListItems.length]);

  const activeQuotation = useMemo(() => {
    const result = quotations.find(q => q.id === selectedQuotationId) || quotations.find(q => q.status === 'Aberta' || q.status === 'Pausada') || quotations[0] || null;
      selectedQuotationId, 
      foundById: !!quotations.find(q => q.id === selectedQuotationId),
      foundByStatus: !!quotations.find(q => q.status === 'Aberta' || q.status === 'Pausada'),
      usedFirst: !selectedQuotationId && !!quotations[0],
      totalQuotations: quotations.length
    });
    return result;
  }, [quotations, selectedQuotationId]);

  useEffect(() => {
    if (!user || !selectedDate) {
      setIsLoading(false);
      return;
    }
    
      userId: user.uid, 
      selectedDate: selectedDate.toISOString() 
    });
    
    setIsLoading(true);
    setLoadingStates({ quotations: true, items: true });
    
    const startOfSelectedDay = startOfDay(selectedDate);
    const endOfSelectedDay = endOfDay(selectedDate);
    
      startOfDay: startOfSelectedDay.toISOString(),
      endOfDay: endOfSelectedDay.toISOString()
    });
    
    // Listener for Quotations
    const qQuotations = query(
      collection(db, QUOTATIONS_COLLECTION),
      where("userId", "==", user.uid),
      where("shoppingListDate", ">=", Timestamp.fromDate(startOfSelectedDay)),
      where("shoppingListDate", "<=", Timestamp.fromDate(endOfSelectedDay))
    );
    
    const unsubQuotations = onSnapshot(qQuotations, (snapshot) => {
      
      const fetchedQuotations = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Quotation));
      setQuotations(fetchedQuotations);
      
      setLoadingStates(prev => ({ ...prev, quotations: false }));
      
        quotationsCount: fetchedQuotations.length 
      });
    }, (error) => {
      console.error("Error fetching quotations:", error);
      toast({title: "Erro ao buscar cotações", description: error.message, variant: "destructive"});
      setLoadingStates(prev => ({ ...prev, quotations: false }));
    });

    // Listener for Shopping List Items
    const qItems = query(
      collection(db, SHOPPING_LIST_ITEMS_COLLECTION),
      where("userId", "==", user.uid),
      where("listDate", ">=", Timestamp.fromDate(startOfSelectedDay)),
      where("listDate", "<=", Timestamp.fromDate(endOfSelectedDay)),
      orderBy("listDate", "desc"),
      orderBy("name", "asc")
    );
    
    const unsubItems = onSnapshot(qItems, (snapshot) => {
      
      const fetchedItems = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as ShoppingListItem));
      setShoppingListItems(fetchedItems);
      
      setLoadingStates(prev => ({ ...prev, items: false }));
      
        itemsCount: fetchedItems.length 
      });
      
        quotationsLoaded: true,
        itemsLoaded: true,
        totalItems: fetchedItems.length
      });
    }, (error) => {
      console.error("Error fetching list items:", error);
      toast({title: "Erro ao carregar lista de compras", description: error.message, variant: "destructive"});
      setLoadingStates(prev => ({ ...prev, items: false }));
    });

    return () => {
      unsubQuotations();
      unsubItems();
    };
  }, [selectedDate, user, toast]); // Removido logs das dependências para evitar loop

  const handlePreviousDay = () => onDateChange(subDays(selectedDate, 1));
  const handleNextDay = () => onDateChange(addDays(selectedDate, 1));

  const handlePauseToggle = async () => {
    if (!activeQuotation) return;
    
    if (activeQuotation.status === 'Pausada') {
      setQuotationToResume(activeQuotation);
      setNewDeadlineDate(activeQuotation.deadline.toDate());
      setNewDeadlineTime(format(activeQuotation.deadline.toDate(), 'HH:mm'));
      setIsResumeModalOpen(true);
    } else {
      try {
        await updateDoc(doc(db, QUOTATIONS_COLLECTION, activeQuotation.id), { status: 'Pausada' });
        toast({ title: "Cotação Pausada", description: "Os fornecedores não poderão enviar novas ofertas." });
      } catch (error: any) {
        toast({ title: "Erro ao pausar", description: error.message, variant: "destructive" });
      }
    }
  };

  const handleConfirmResume = async () => {
    if (!quotationToResume || !newDeadlineDate) return;
    
    const [hours, minutes] = newDeadlineTime.split(':').map(Number);
    const finalDeadline = new Date(newDeadlineDate);
    finalDeadline.setHours(hours, minutes, 0, 0);

    if (finalDeadline < new Date()) {
      toast({ title: "Data Inválida", description: "O novo prazo não pode ser no passado.", variant: "destructive" });
      return;
    }
    
    try {
      await updateDoc(doc(db, QUOTATIONS_COLLECTION, quotationToResume.id), {
        status: 'Aberta',
        deadline: Timestamp.fromDate(finalDeadline)
      });
      toast({ title: "Cotação Retomada!", description: `Novo prazo: ${format(finalDeadline, "dd/MM/yyyy HH:mm")}.` });
      setIsResumeModalOpen(false);
    } catch (error: any) {
      toast({ title: "Erro ao retomar", description: error.message, variant: "destructive" });
    }
  };
  
  const itemsToDisplay = useMemo(() => {
      totalItems: shoppingListItems.length,
      hasActiveQuotation: !!activeQuotation,
      activeQuotationId: activeQuotation?.id,
      searchTerm,
      statusFilter
    });
    
    const listToFilter = activeQuotation
      ? shoppingListItems.filter(item => item.quotationId === activeQuotation.id)
      : shoppingListItems.filter(item => !item.quotationId);

      itemsAfterQuotationFilter: listToFilter.length,
      itemsWithQuotationId: shoppingListItems.filter(item => !!item.quotationId).length,
      itemsWithoutQuotationId: shoppingListItems.filter(item => !item.quotationId).length
    });

    const finalItems = listToFilter.filter(item => {
      const searchTermMatch = item.name.toLowerCase().includes(searchTerm.toLowerCase());
      const statusMatch = statusFilter === 'todos-status' || item.status === statusFilter;
      return searchTermMatch && statusMatch;
    }).sort((a,b) => a.name.localeCompare(b.name));
    
      finalItemsCount: finalItems.length,
      finalItems: finalItems.map(item => ({ 
        id: item.id, 
        name: item.name, 
        status: item.status,
        quotationId: item.quotationId 
      }))
    });
    
    return finalItems;
  }, [shoppingListItems, activeQuotation, searchTerm, statusFilter]);

  const getStatusBadgeVariant = (status: ShoppingListItem['status']): "default" | "secondary" | "destructive" | "outline" | "success" => {
    switch (status) {
      case 'Comprado': return 'default';
      case 'Pendente': return 'outline';
      case 'Cotado': return 'success';
      case 'Recebido': return 'secondary';
      case 'Cancelado': return 'destructive';
      case 'Encerrado': return 'destructive';
      default: return 'secondary';
    }
  };

  return (
    <>
      <Card>
        <CardHeader className="flex-wrap !flex-row gap-4 justify-between items-center">
          <div className="flex items-center flex-wrap">
            <Button variant="outline" size="icon" onClick={handlePreviousDay} className="rounded-r-none border-r-0">
              <ChevronLeft className="h-4 w-4" />
            </Button>
            <Popover>
              <PopoverTrigger asChild>
                <Button variant="outline" className="min-w-[240px] justify-start text-left font-normal rounded-none">
                  <IconCalendar className="mr-2 h-4 w-4" />
                  {format(selectedDate, "EEEE, dd 'de' MMMM", { locale: ptBR })}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0">
                <Calendar mode="single" selected={selectedDate} onSelect={(d) => d && onDateChange(d)} initialFocus locale={ptBR} />
              </PopoverContent>
            </Popover>
            <Button variant="outline" size="icon" onClick={handleNextDay} className="rounded-l-none border-l-0">
              <ChevronRight className="h-4 w-4" />
            </Button>
          </div>
          {quotations.length > 1 && (
            <Select value={selectedQuotationId || ""} onValueChange={setSelectedQuotationId}>
              <SelectTrigger className="w-full sm:w-auto">
                <SelectValue placeholder="Ver cotação específica" />
              </SelectTrigger>
              <SelectContent>
                {quotations.map((q) => (
                  <SelectItem key={q.id} value={q.id}>
                    Cotação de {format(q.shoppingListDate.toDate(), "dd/MM/yy HH:mm")} - {q.status}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          )}
          <div className="flex items-center gap-2 flex-wrap">
            <div className="relative">
              <Search className="absolute left-2.5 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input placeholder="Buscar item..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="pl-8 w-full sm:w-[250px]" />
            </div>
            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger className="w-full sm:w-[180px]">
                <SelectValue placeholder="Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="todos-status">Todos</SelectItem>
                <SelectItem value="Pendente">Pendente</SelectItem>
                <SelectItem value="Cotado">Cotado</SelectItem>
                <SelectItem value="Comprado">Comprado</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </CardHeader>
        <CardContent className="p-6 pt-0 space-y-6">
          {isLoading ? (
            <div className="flex justify-center p-8"><Loader2 className="h-8 w-8 animate-spin text-primary" /></div>
          ) : (
            <>
              {activeQuotation && (
                <Alert variant={activeQuotation.status === 'Aberta' ? 'default' : 'destructive'} className="bg-primary/5 border-primary/20">
                  <div className="flex flex-col sm:flex-row justify-between sm:items-center w-full gap-2">
                    <div>
                      <AlertTitle className="text-primary">{`Cotação ${activeQuotation.status}`}</AlertTitle>
                      <p className="text-sm text-muted-foreground">Prazo: {format(activeQuotation.deadline.toDate(), "dd/MM/yyyy HH:mm")}</p>
                    </div>
                    <div className="flex items-center gap-2 self-start sm:self-center">
                      {(activeQuotation.status === 'Aberta' || activeQuotation.status === 'Pausada') && (
                        <Button onClick={handlePauseToggle} variant="secondary" size="sm">
                          {activeQuotation.status === 'Pausada' ? <PlayCircle className="mr-2 h-4 w-4" /> : <PauseCircle className="mr-2 h-4 w-4" />}
                          {activeQuotation.status === 'Pausada' ? 'Retomar' : 'Pausar'}
                        </Button>
                      )}
                      <Button onClick={() => router.push(`/cotacao?quotationId=${activeQuotation.id}`)} variant="outline" size="sm">
                        <FileBarChart className="mr-2 h-4 w-4" /> Ver Análise
                      </Button>
                    </div>
                  </div>
                </Alert>
              )}
              <div className="rounded-md border" key={`table-${shoppingListItems.length}-${quotations.length}-${isLoading}`}>
                <Table>
                  <TableHeader><TableRow>
                    <TableHead>Status</TableHead>
                    <TableHead>Qtd./Unid.</TableHead>
                    <TableHead>Item</TableHead>
                    <TableHead>Marcas</TableHead>
                  </TableRow></TableHeader>
                  <TableBody>
                    {itemsToDisplay.length > 0 ? (
                      itemsToDisplay.map((item) => (
                        <TableRow key={item.id}>
                          <TableCell><Badge variant={getStatusBadgeVariant(item.status)}>{item.status === 'Cotado' ? 'Cotando' : item.status}</Badge></TableCell>
                          <TableCell>{`${item.quantity} ${item.unit}`}</TableCell>
                          <TableCell className="font-medium">{item.name}</TableCell>
                          <TableCell>{item.preferredBrands || "-"}</TableCell>
                        </TableRow>
                      ))
                    ) : (
                      <TableRow>
                        <TableCell colSpan={4} className="h-24 text-center text-muted-foreground">
                          {shoppingListItems.length === 0 
                            ? "Nenhum item encontrado para esta data." 
                            : `${shoppingListItems.length} itens carregados mas filtrados. Verifique filtros.`
                          }
                        </TableCell>
                      </TableRow>
                    )}
                  </TableBody>
                </Table>
              </div>
            </>
          )}
        </CardContent>
      </Card>
      
      <Dialog open={isResumeModalOpen} onOpenChange={setIsResumeModalOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Retomar Cotação</DialogTitle>
            <DialogDescription>Ajuste o prazo final para os fornecedores.</DialogDescription>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium">Nova Data Limite</label>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button variant="outline" className="w-full justify-start text-left font-normal mt-1">
                      <IconCalendar className="mr-2 h-4 w-4" />
                      {newDeadlineDate ? format(newDeadlineDate, "dd/MM/yyyy") : <span>Escolha a data</span>}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0">
                    <Calendar mode="single" selected={newDeadlineDate} onSelect={setNewDeadlineDate} initialFocus locale={ptBR} />
                  </PopoverContent>
                </Popover>
              </div>
              <div>
                <label className="text-sm font-medium">Novo Horário Limite</label>
                <Input type="time" value={newDeadlineTime} onChange={(e) => setNewDeadlineTime(e.target.value)} className="mt-1" />
              </div>
            </div>
          </div>
          <DialogFooter>
            <DialogClose asChild><Button variant="outline">Cancelar</Button></DialogClose>
            <Button onClick={handleConfirmResume}>Confirmar e Retomar</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
}
