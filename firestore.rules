rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    match /supplies/{supplyId} {
      allow get: if request.auth != null && resource.data.userId == request.auth.uid;
      allow list: if request.auth != null && request.auth.uid != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    match /supply_categories/{categoryId} {
      allow get: if request.auth != null && resource.data.userId == request.auth.uid;
      allow list: if request.auth != null && request.auth.uid != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    match /{collection}/{docId} {
      allow read, write: if collection in ['incoming_messages', 'user_sessions', 'whatsapp_config'] && isOwner(resource.data.userId);
    }

    match /{collection}/{docId} {
      allow create: if collection in ['incoming_messages', 'user_sessions', 'whatsapp_config'] && isOwner(request.resource.data.userId);
    }

    match /notifications/{notificationId} {
      // Allow reading notifications if you're the owner OR if it's targeted to a supplier (anonymous access)
      allow get: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        resource.data.targetSupplierId != null
      );
      // Allow listing for authenticated users (they'll filter by userId or targetSupplierId in queries)
      allow list: if true; // Allow unauthenticated supplier portal access
      // Allow creating notifications for yourself OR for suppliers (with targetSupplierId)
      allow create: if request.auth != null && (
        request.resource.data.userId == request.auth.uid ||
        request.resource.data.targetSupplierId != null
      );
      // Allow updating supplier notifications (anonymous) OR user notifications (authenticated)
      allow update: if (
        resource.data.targetSupplierId != null || // Supplier notifications (anonymous)
        (request.auth != null && resource.data.userId == request.auth.uid) // User notifications (authenticated)
      );
      // Allow deleting only if you're the authenticated owner
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    match /fornecedores/{supplierId} {
      allow get: if true;
      allow list: if request.auth != null;
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Allow update for authenticated users (owners) OR unauthenticated suppliers completing registration
      allow update: if (
        (request.auth != null && resource.data.userId == request.auth.uid) || // Authenticated owner
        true // Allow unauthenticated suppliers to complete their registration
      );
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Quotations collection - authenticated users own their quotations, suppliers can read assigned quotations
    match /quotations/{quotationId} {
      allow read: if true; // Allow unauthenticated supplier portal access
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Shopping list items - authenticated users own, suppliers can read items for their quotations
    match /shopping_list_items/{itemId} {
      allow read: if true; // Allow unauthenticated supplier portal access
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    match /{path=**}/offers/{offerId} {
        allow read: if true;
        allow create: if true;
        allow update, delete: if request.auth != null;
    }

    match /quotations/{quotationId}/products/{productId}/offers/{offerId} {
        allow read: if true;
        allow create: if true;
        allow update, delete: if request.auth != null;
    }

    match /pending_brand_requests/{requestId} {
        allow read: if true; // Allow unauthenticated supplier portal access
        allow create: if true;
        allow update, delete: if request.auth != null && resource.data.buyerUserId == request.auth.uid;
    }

    // WhatsApp queue - authenticated users can create and read their messages
    match /whatsapp_queue/{messageId} {
        allow get: if request.auth != null && resource.data.userId == request.auth.uid;
        allow list: if request.auth != null && request.auth.uid != null;
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // WhatsApp conversations - authenticated users can read and write
    match /whatsapp_conversations/{conversationId} {
        allow read, write: if request.auth != null;
    }
  }
}